/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package source.debezium;

import com.fasterxml.jackson.databind.JsonNode;
import io.debezium.engine.ChangeEvent;
import io.debezium.engine.DebeziumEngine;
import io.debezium.engine.format.Json;
import io.debezium.engine.spi.OffsetCommitPolicy;
import io.hstream.HRecord;
import io.hstream.io.KvStore;
import io.hstream.io.SourceTaskContext;
import java.io.IOException;
import java.util.List;
import java.util.Properties;
import io.hstream.io.SourceTask;
import io.hstream.io.impl.SourceOffsetsManagerImpl;

import java.util.UUID;
import java.util.function.Function;

abstract class DebeziumSourceTask implements SourceTask {
    DebeziumEngine<ChangeEvent<String, String>> engine;
    SourceTaskContext ctx;
    Properties props = new Properties();
    private String namespace;

    public void setKeyMapper(Function<HRecord, HRecord> keyMapper) {
        this.keyMapper = keyMapper;
    }

    Function<HRecord, HRecord> keyMapper;

    @Override
    public void run(HRecord cfg, SourceTaskContext ctx) {
        this.ctx = ctx;
        props.setProperty("name", "engine");
        OffsetBackingStore.setKvStore(ctx.getKvStore());
        OffsetBackingStore.setNamespace(getNamespace(ctx.getKvStore()));
        OffsetBackingStore.setOffsetsManager(new SourceOffsetsManagerImpl(ctx.getKvStore(), "debezium"));
        props.setProperty("offset.storage", "source.debezium.OffsetBackingStore");
        props.setProperty("offset.flush.interval.ms", "3000");

        // schema
        props.setProperty("key.converter", "org.apache.kafka.connect.json.JsonConverter");
        props.setProperty("key.converter.schemas.enable", "false");
        props.setProperty("value.converter", "org.apache.kafka.connect.json.JsonConverter");
        props.setProperty("value.converter.schemas.enable", "false");

        DatabaseHistory.setKv(ctx.getKvStore());
        props.setProperty("database.history", "source.debezium.DatabaseHistory");

        // Create the engine with this configuration ...
        engine = DebeziumEngine.create(Json.class)
                .using(props)
                .using(OffsetCommitPolicy.always())
                .notifying(new RecordConsumer(ctx, getNamespace(ctx.getKvStore()), cfg.getString("stream"), keyMapper))
                .build();

        engine.run();
    }

    public String getNamespace(KvStore kvStore) {
        if (namespace == null) {
            namespace = kvStore.get("namespace").join();
            if (namespace == null) {
                namespace = UUID.randomUUID().toString().replace("-", "");
                kvStore.set("namespace", namespace);
            }
        }
        return namespace;
    }

    @Override
    public List<JsonNode> getOffsets() {
        return OffsetBackingStore.getOffsets();
    }

    @Override
    public void stop() {
        try {
            engine.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}