/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

java {
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

group = "io.hstream"
version = "0.1.0-SNAPSHOT"

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation 'io.hstream:hstreamdb-java:0.16.0-SNAPSHOT'
    implementation 'com.beust:jcommander:1.82'
    implementation 'com.networknt:json-schema-validator:1.0.71'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
    implementation 'com.google.protobuf:protobuf-java:3.22.2'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // BSON
    implementation 'org.mongodb:bson:4.9.1'
}

publishing {
    publications {
        mavenJava(MavenPublication){
            artifactId = "java-toolkit"
            from(components["java"])
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name.set("java-toolkit")
                description.set("Java Connector Toolkit for HStreamDB")
                url.set("https://hstream.io")
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id.set("s12f")
                        name.set("Siwen Feng")
                        email.set("siwen.feng@emqx.io")
                    }
                }
                scm {
                    connection.set("scm:git:https://github.com/hstreamdb/hstream-connectors.git")
                    developerConnection.set("scm:git:https://github.com/hstreamdb/hstream-connectors.git")
                    url.set("https://github.com/hstreamdb/hstream-connectors")
                }
            }
        }
    }
    repositories {
        maven {
            var releasesRepoUrl =
                    "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            var snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            // def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = null
            if (version.toString().endsWith("SNAPSHOT")) {
                url = snapshotsRepoUrl
            } else {
                url = releasesRepoUrl
            }
            credentials {
                username = null
                if (project.hasProperty("ossrhUsername")) {
                    username = project.property("ossrhUsername")
                }  else {
                    username = System.getenv("OSSRH_USERNAME")
                }
                password = null
                if (project.hasProperty("ossrhPassword"))
                    password = project.property("ossrhPassword")
                else
                    password = System.getenv("OSSRH_TOKEN")
            }
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
