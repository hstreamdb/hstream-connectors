/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'

    implementation 'io.hstream:java-toolkit:0.1.0-SNAPSHOT'
    implementation 'io.hstream:hstreamdb-java:0.16.0-SNAPSHOT'

    compileOnly 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'

    // jdbc
    implementation 'mysql:mysql-connector-java:8.0.29'
    implementation 'org.postgresql:postgresql:42.4.0'

    // jsonNode
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

var imageVersion = System.getenv("CONNECTOR_IMAGE_VERSION")
if (imageVersion == null) {
    imageVersion = "latest"
}

task buildMysqlImage(type: Exec) {
    dependsOn(installDist)
    commandLine "docker", "build", "..", "-f", "../docker/MysqlDockerfile", "-t", "hstreamdb/sink-mysql:${imageVersion}"
}

task buildPostgresqlImage(type: Exec) {
    dependsOn(installDist)
    commandLine "docker", "build", "..", "-f", "../docker/PostgresqlDockerfile", "-t", "hstreamdb/sink-postgresql:${imageVersion}"
}

task buildImages {
    dependsOn(buildMysqlImage)
    dependsOn(buildPostgresqlImage)
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
