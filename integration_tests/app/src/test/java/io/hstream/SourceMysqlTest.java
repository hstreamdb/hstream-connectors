/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.hstream;

import com.google.protobuf.Struct;
import io.grpc.ManagedChannelBuilder;
import io.hstream.internal.CommandQuery;
import io.hstream.internal.HStreamApiGrpc;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.testcontainers.containers.DockerComposeContainer;
import org.testcontainers.containers.GenericContainer;

class SourceMysqlTest {
    GenericContainer<?> mysql;
    Connection conn;
    String serverHost = "127.0.0.1";
    int serverPort;
    HStreamApiGrpc.HStreamApiBlockingStub stub;
    HStreamClient client;
    DockerComposeContainer<?> service;

    @BeforeEach
    void setup() throws Exception {
        // setup HStreamDB
        service = Utils.makeHStreamDB();
        service.start();
        serverPort = service.getServicePort("hserver0", 6570);
        client = HStreamClient.builder().serviceUrl(serverHost + ":" + serverPort).build();
        var channel =
                ManagedChannelBuilder.forAddress(serverHost, serverPort).usePlaintext().build();
        stub = HStreamApiGrpc.newBlockingStub(channel);
        System.out.println("HStreamDB started");

        // setup mysql
        mysql = Utils.makeMysql();
        mysql.start();

        conn = Utils.getMysqlConn(mysql.getMappedPort(3306));
        prepareTable();
        System.out.println("Mysql started");
    }

    @AfterEach
    void tearDown() throws Exception {
        mysql.stop();
        service.stop();
    }

    void prepareTable() throws SQLException {
        var stmt = conn.createStatement();
        stmt.execute("create database d1");
        stmt.execute("create table d1.person (id int primary key, name varchar(256), age int)");
    }

    void executeStmt(String stmt) throws SQLException {
        conn.createStatement().execute(stmt);
    }

    List<Struct> executeHStreamSql(String sql) {
        var cmdQuery = CommandQuery.newBuilder().setStmtText(sql).build();
        return stub.executeQuery(cmdQuery).getResultSetList();
    }

    void createSourceConnector() throws UnknownHostException {
        var hostname = InetAddress.getLocalHost().getHostName();
        var sql = "create source connector ss01 from mysql with" +
                "(\"host\" = \"" + hostname + "\"," +
                "\"port\" = " + mysql.getMappedPort(3306) + "," +
                "\"user\" = \"root\"," +
                "\"password\" = \"password\"," +
                "\"database\" = \"d1\"," +
                "\"table\" = \"person\"," +
                "\"stream\" = \"s01\");";
        executeHStreamSql(sql);
    }

    @Test
    void testFullReplication() throws Exception {
        // prepared data
        var ps = conn.prepareStatement("insert into d1.person values (?, ?, ?)");
        ps.setObject(1, 1);
        ps.setObject(2, "John");
        ps.setObject(3, 20);
        ps.execute();
        System.out.println("prepared data");
        createSourceConnector();
        Thread.sleep(5000);
        var result = executeHStreamSql("show connectors;");
        Assertions.assertEquals(result.size(), 1);
        // check the stream
        var res = Utils.readStream(client, "s01", 5);
        Assertions.assertEquals(1, res.size());
        executeHStreamSql("drop connector ss01;");
    }
}
